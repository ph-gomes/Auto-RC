#include "virtualGPS/virtual_GPS.h"



VirtualGPS::VirtualGPS(ros::NodeHandle *rosNode_): rosNode(rosNode_)
{
     	g_window_name = std::string("Virtual GPS Node");
  	cv::namedWindow(g_window_name);
	
	std::string topic = rosNode->resolveName("image");

	image_transport::ImageTransport it(*rosNode);  	
  	image_sub = it.subscribe(topic, 1,boost::bind(&VirtualGPS::image_receive, this, _1));


	pose2D_pub = rosNode->advertise<geometry_msgs::Pose2D>("/virtualGPS/pose2D", 1);
		
	pose.x = 0.0;
	pose.y = 0.0;
	pose.theta = 0.0;
	

	// Start the OpenCV window thread so we don't have to waitKey() somewhere
  	cv::startWindowThread();

}

VirtualGPS::~VirtualGPS()
{
	cv::destroyWindow(g_window_name);
}


void VirtualGPS::image_receive(const sensor_msgs::ImageConstPtr& msg)
{
  	boost::mutex::scoped_lock lock(g_image_mutex);

  	try
    	{
      		g_last_image = cv_bridge::toCvShare(msg, "bgr8")->image;
    	} catch(cv_bridge::Exception)
    	{
     		ROS_ERROR("Unable to convert %s image to bgr8", msg->encoding.c_str());
      		//return false;
    	}

  	if (!g_last_image.empty()) 
	{
    		const cv::Mat &image = g_last_image;
    		image_processing(image);
    
  	}
}

void VirtualGPS::image_processing(const cv::Mat &image)
{
	
	cv::Mat gray,src;	
	src = image;

	/// Convert it to gray
  	cv::cvtColor( image, gray, CV_BGR2GRAY );

  	/// Reduce the noise so we avoid false circle detection
  	cv::GaussianBlur( gray, gray, cv::Size(9, 9), 2, 2 );

  	std::vector<cv::Vec3f> circles;

  	/// Apply the Hough Transform to find the circles
  	cv::HoughCircles( gray, circles, CV_HOUGH_GRADIENT, 1, 10, 200, 100, 0, 0 );
	
	if(circles.size()>0)
	{
		cv::Point center(cvRound(circles[0][0]), cvRound(circles[0][1]));	
		pose.x = center.x;
		pose.y = center.y;
		pose.theta = 33.3;
		pose2D_pub.publish(pose);
	}

  	/// Draw the circles detected
  	for( size_t i = 0; i < circles.size(); i++ )
  	{
      		cv::Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
      		int radius = cvRound(circles[i][2]);
      		// circle center
      		cv::circle( src, center, 3, cv::Scalar(0,255,0), -1, 8, 0 );
      		// circle outline
      		circle( src, center, radius, cv::Scalar(0,0,255), 3, 8, 0 );
   	}
	
	imageShow((const cv::Mat) src);

}


void VirtualGPS::imageShow(const cv::Mat &image)
{

	cv::imshow(g_window_name, image);
	cv::waitKey(3);

}


